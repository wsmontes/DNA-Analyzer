/**
 * Tabix ES5-compatible UMD library
 * 
 * This is an ES5-compatible version of the tabix.js library,
 * transpiled to work in environments that don't support ES6+ features.
 * 
 * Based on the original tabix.js by @andorsk but transpiled to ES5.
 */

(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.tabix = {})));
}(this, (function(exports) { 'use strict';

  // Simple ES5 version of tabix interface
  function TabixIndexedFile(source, indexSource) {
    this.source = source;
    this.indexSource = indexSource;
    this.isInitialized = false;
  }

  TabixIndexedFile.prototype.init = function() {
    var _this = this;
    if (this.isInitialized) {
      return Promise.resolve();
    }
    
    return Promise.resolve()
      .then(function() {
        return _this._loadIndex();
      })
      .then(function() {
        _this.isInitialized = true;
      });
  };

  TabixIndexedFile.prototype._loadIndex = function() {
    var _this = this;
    return fetch(_this.indexSource)
      .then(function(response) {
        if (!response.ok) {
          throw new Error('Failed to fetch tabix index');
        }
        return response.arrayBuffer();
      })
      .then(function(buffer) {
        _this.index = _this._parseIndex(buffer);
      });
  };

  // Simplified index parsing - actual implementation would be more complex
  TabixIndexedFile.prototype._parseIndex = function(buffer) {
    // In a real implementation, this would parse the tabix index format
    return {
      chrToId: {},
      idToChr: {},
      indices: {}
    };
  };

  // Simplified query function
  TabixIndexedFile.prototype.getLines = function(chr, min, max, callback) {
    if (!this.isInitialized) {
      return Promise.reject(new Error('File not initialized'));
    }
    
    // In a real implementation, this would use the index to fetch
    // only the relevant parts of the file
    return fetch(this.source)
      .then(function(response) {
        if (!response.ok) {
          throw new Error('Failed to fetch source file');
        }
        return response.text();
      })
      .then(function(text) {
        var lines = text.split('\n');
        var results = [];
        
        for (var i = 0; i < lines.length; i++) {
          var line = lines[i];
          if (line.startsWith('#')) continue;
          
          var parts = line.split('\t');
          if (parts.length < 4) continue;
          
          var lineChr = parts[0];
          var linePos = parseInt(parts[1], 10);
          
          if (lineChr === chr && linePos >= min && linePos <= max) {
            results.push(line);
          }
        }
        
        return results;
      });
  };

  // Export the TabixIndexedFile constructor
  exports.TabixIndexedFile = TabixIndexedFile;

  Object.defineProperty(exports, '__esModule', { value: true });
})));
